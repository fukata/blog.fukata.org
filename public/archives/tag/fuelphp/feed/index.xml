<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>FuelPHP &#8211; blog.fukata.org</title>
	<atom:link href="/archives/tag/fuelphp/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>旅するプログラマ</description>
	<lastBuildDate>Fri, 11 Aug 2017 22:58:48 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.6</generator>
	<item>
		<title>[FuelPHP]Validationの使い方</title>
		<link>/archives/6598/</link>
					<comments>/archives/6598/#comments</comments>
		
		<dc:creator><![CDATA[fukata]]></dc:creator>
		<pubDate>Sat, 03 Dec 2011 19:37:43 +0000</pubDate>
				<category><![CDATA[開発]]></category>
		<category><![CDATA[Advent Calendar]]></category>
		<category><![CDATA[FuelPHP]]></category>
		<guid isPermaLink="false">http://fukata.org/?p=6598</guid>

					<description><![CDATA[FuelPHP Advent Calendar 2011 : ATND 先日、@kenji_sさんからFuelPHPのAdvent Calendarがあるから良かったらどうぞということだったので、参加 ... <a href="/archives/6598/"> 続きを読む</a>]]></description>
										<content:encoded><![CDATA[<p><br />
<a href="https://atnd.org/events/22380">FuelPHP Advent Calendar 2011 : ATND</a></p>
<p>先日、@<a href="https://twitter.com/#!/kenji_s">kenji_s</a>さんからFuelPHPのAdvent Calendarがあるから良かったらどうぞということだったので、参加してみることにしました。Advent Calendar初参加！</p>
<p>とは言うもののCodeIgniterは仕事でも使っていたのですが、<a href="https://fuelphp.com/">FuelPHP</a>は一切触ったことがないというくらい初めてのもので、そんな自分にでも何か書ける内容がないかと探して、ほとんどのシステムで必要になるであろうValidation部分について調べながら書くことにしました。そのため、いくつか間違っている点などがあるかもしれませんが、もしそういう点がありましたら、コメントなり何なり頂けると助かります。</p>
<p><span id="more-6598"></span></p>
<div class="ad_section"><div class="ad_title">広告</div><div class="ad_body"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- blog-content-bottom1 -->
<ins class="adsbygoogle"
     style="display:block"
     data-ad-client="ca-pub-9703571485671477"
     data-ad-slot="4353022998"
     data-ad-format="auto"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></div>
<p>では、早速基本的なValidationの使い方を見ていきたいと思います。</p>
<p>いきなりですが、Validationのドキュメントについては、<a href="https://docs.fuelphp.com/classes/validation/validation.html">こちら</a>になります。</p>
<h2>基本的な検証</h2>
<p>今回は、「ユーザ名」、「メールアドレス」という2つの入力項目に対しての入力値の検証処理を書いてみたいと思います。</p>
<h3>検証部分</h3>
<p>検証テスト用のController_Validationというコントローラを作成し、入力値を検証するメソッドとして、action_validateの処理を下記のようにしてみました。</p>
<pre lang="php">
// 1. Validationオブジェクト生成
$validation = Validation::forge();

// 2. 検証ルール設定
// 2.1. username項目の検証ルール設定
$validation->add('username', 'ユーザ名')
    ->add_rule('required')
    ->add_rule('mix_length', 4)
    ->add_rule('max_length', 10);

// 2.2. email項目の検証ルール設定
$validation->add_field('email', 'メールアドレス', 'required|min_length[10]|max_length[128]');

// 3. 検証実行
if ($validation->run()) {
    // 3.1. 検証成功
    return Response::forge(View::forge('validation/index'));
} else {
    // 3.2. 検証失敗
    return Response::forge(View::forge('validation/index'));
}
</pre>
<p>まず、「1. Validationオブジェクト生成」の箇所ですが、Validation#forgeメソッドは、フィールドセットと呼ばれる、入力ソースのグループだと個人的には捉えているのですが、そのグループの名前を引数に渡すことができます。グループが1つしかない場合は未指定（デフォルト：default）、グループが2つ以上なるような複雑な場合には、名前を指定して、複数のValidationオブジェクトを生成、管理することも出来ます。</p>
<p>例えば、バッチ等で1リクエスト中に複数の外部リソースを取り込む場合に、それらの値の検証を行う場合に複数のValidationオブジェクトが使えると便利です。</p>
<p>次に、2.1, 2.2で検証ルールを設定していますが、add_ruleのようにチェインメソッド形式で指定する方法と、CodeIgniterのように一度に全て設定する方法があります。</p>
<p>また、デフォルトで提供されている検証ルールは<a href="https://docs.fuelphp.com/classes/validation/validation.html#/rules">こちら</a>に記載されています。</p>
<p>で、最後の「3. 検証実行」の部分で検証ルールに基づいて検証を実行しています。</p>
<h3>エラー表示</h3>
<pre lang="php">
$errors = $validation->error(); // エラーの項目とメッセージの連想配列を取得
$error_html = $validation->show_errors(); // エラーメッセージ用HTMLを取得
$error_input = $validation->input(); // 検証に使用した入力値を項目と値の連想配列で取得
</pre>
<p>のように、Fuel\Core\Validation#show_errorsメソッドを使うことで、エラーメッセージ用のHTML文字列を返してくれます。</p>
<p>ただし、FuelPHPでは標準でView内で使用される文字列や__toStringメソッドが定義されているオブジェクトに関してはエスケープされるので、コントローラ側でshow_errorsの結果をViewに渡してもタグがエスケープされた状態になっています。そのため、View側で元の状態に戻す必要があります。</p>
<p>この、View内で使用される変数のエスケープ処理については、config.phpにあるsecurityセクションのoutput_filter, auto_filter_ouput, whitelisted_classesの設定値を参照しており、各値については以下のような意味合いになります。</p>
<ul>
<li>output_filter: エスケープ処理の関数</li>
<li>auto_filter_ouput: 自動でエスケープするか</li>
<li>whitelisted_classes: エスケープ処理を適用しないクラス（Viewに渡した値が指定されたクラスのインスタンスだった場合にエスケープ処理は適用されない）</li>
</ul>
<p>詳しくは、公式のSecurityクラスのドキュメントを参照してください。</p>
<p><a href="https://docs.fuelphp.com/classes/security.html">Security &#8211; Classes &#8211; FuelPHP Documentation</a></p>
<p>エスケープせずにビューにデータを渡したい場合には、下記のようにViewオブジェクトのインスタンスに変数を直接設定することで可能です。</p>
<pre lang="php">
$view = View::forge('validation/index');
$view->set_safe('error_html', $validation->show_errors());
</pre>
<h3>部分検証</h3>
<p>場合によっては設定した項目全てではなく、一部の項目についてのみ検証したいということがあるかもしれません。そういった使い方をしたい場合には、下記のようにすることで部分的な検証が行えます。</p>
<pre lang="php">
// 第1引数は、検証対象の項目名と値の連想配列
// 第2引数は、部分検証を行うかどうか
if ($validation->run(array('username' => Input::post('username')), true)) {
    // 検証成功
} else {
    // 検証失敗
}
</pre>
<p>ただし、この場合は、送信された情報の中にemailが含まれていない場合のみです。データが送られてきていて、検証ルールも設定されているが、実際に検証したいのは一部のみ、という時には下記のように、第二引数に部分検証を行う項目を配列で指定します。</p>
<pre lang="php">
// 第1引数は、検証対象の項目名と値の連想配列
// 第2引数は、部分検証を行う項目
if ($validation->run(array('username' => Input::post('username')), array('username'))) {
    // 検証成功
} else {
    // 検証失敗
}
</pre>
<h2>カスタムバリデーション</h2>
<p>これまでは、デフォルトで提供されている検証ルールのみを使用してきました。ただ、業務で利用している場合、データベースの値と照合したりなど、足りない部分というのがあります。</p>
<p>そこで、<strong>app/classes/myvalidation.php</strong>に下記のような独自のValidationクラスとStaticな検証用メソッドを定義します。検証用メソッドのプレフィックスは<strong>_validation_</strong>である必要があります。</p>
<pre lang="php">
class Myvalidation {
    public static function _validation_myvalid($val) {
        return $val == 'fukata';
    }
}
</pre>
<p>ファイル名については、下記のadd_callableで指定している値と一致していれば良いです。</p>
<p>これを先程の検証ルールで利用するには、下記のように変更します。カスタムバリデーション用のメッセージについても下の方に書いている「メッセージの変更」で書いているvalidation.phpに追記すれば大丈夫です。</p>
<pre lang="php">
// 2. 検証ルール設定
$validation->add_callable('myvalidation');
// 2.1. username項目の検証ルール設定
$validation->add('username', 'ユーザ名')
    ->add_rule('required')
    ->add_rule('mix_length', 4)
    ->add_rule('max_length', 10)
    ->add_rule('myvalid');
</pre>
<h3>モデルとの連携</h3>
<p>今回のサンプルでは、DBとやり取りする部分については書いていませんが、実際には、_validation_myvalidmodelの中で、DBに問い合わせなどを行ったりするコードを書きます。また、先ほど定義した、_validation_myvalidには無かった$optionという引数が追加されています。これは、min_lengthやmax_lengthのように引数を受け取る変数になっています。$option引数に関しては、先ほど定義した_validation_myvalidメソッドでも同じ様に第二引数にオプションを受け取れます。</p>
<p>今回の場合、入力されたメールアドレスが$optionに指定された値と一致しているかというのをチェックしています。さらに、Validation::active()を使い、その時検証中のFieldsetを取得し、エラーメッセージも設定するようにしています。</p>
<p>ファイル：<strong>app/classes/model/validation.php</strong></p>
<pre lang="php">
class Model_Validation extends Model {
    public static function _validation_myvalidmodel($val, $option) {
        if ($option != $val) {
            // 独自でエラーメッセージを設定
            Validation::active()->set_message('myvalidmodel', ':label is hogehoge');
            return false;
        } else {
            return true;
        }   
    }   
}
</pre>
<p>これを先程の検証ルールで利用するには、下記のように変更します。</p>
<pre lang="php">
// 2.2. email項目の検証ルール設定
$validation->add_model('Model_Validation');
$validation->add_field('email', 'メールアドレス', 'required|min_length[10]|max_length[128]|myvalidmodel[fukata@example.com]');
</pre>
<h2>エラー用タグのカスタマイズ</h2>
<p>上記のValidationのドキュメントにも書かれていますが、fuel/app/config/config.phpに下記のようなセクションを追加することで、Fuel\Core\Validation#show_errorsメソッド時のHTMLを変更する事が出来ます。</p>
<pre lang="php">
/** 
 * Validation settings
 */
'validation' => array(
    'open_list' => '<ul>',
    'close_list' => '</ul>',
    'open_error' => '<li>',
    'close_error' => '</li>',
    'no_errors' => '', 
),
</pre>
<h2>検証可能なHTTPメソッド</h2>
<p>CodeIgniterのForm_ValidationはPOSTのみ対応していましたが、FuelPHPのValidationはGET, POST, PUT, DELETEの各メソッドに対応しています。</p>
<h2>メッセージの変更</h2>
<p>fuel/core/lang/en/validation.phpを参考に、fuel/app/lang/en/validation.phpにそれぞれのルールに対してのエラーメッセージを記載すれば変更できます。また、enではなく、fuel/app/lang/ja/validation.phpを作成することで、エラーメッセージの国際化にも対応する事が出来ます。デフォルトのメッセージを日本語にしたい場合は、config.phpにあるlanguageの項目をenからjaに変更するだけで大丈夫だと思います。</p>
<h2>関連ファイル</h2>
<p>今回、Validation周りを使用するに当たって、主に調べたファイル群です。</p>
<ul>
<li>fuel/core/classes/validation.php</li>
<li>fuel/core/classes/fieldset.php</li>
<li>fuel/core/classes/security.php</li>
</ul>
<h2>まとめ</h2>
<p>CodeIgniterのForm_Validationと似ている箇所がいくつかあるため、CodeIgniterを以前使用していた人に取ってはそれほど違和感なく使えるんじゃないでしょうか。</p>
<p>初のAdvent Calendar参加かつ、今回初めてまともに調べたFWだったのでやけに時間がかかってしまいました。また、抜けなどがあるかもしれません。もし、間違い等がありましたら指摘していただければ修正します。とりあえず、書き終えれて良かったです。</p>
<p>最後に、<a href="https://atnd.org/events/22380">Advent Calendar</a>ですが、まだまだ参加者が少ないので、良かったら是非参加してみてください。</p>
<p>3日目：@<a href="https://twitter.com/NEKOGET">NEKOGET</a>さん <a href="https://pneskin2.nekoget.com/press/?p=659">ねこげっとぷれす » Model-View-ControllerそしてViewModel [FuelPHP]</a><br />
5日目：@<a href="https://twitter.com/madmamor">madmamor</a>さん <a href="https://madroom-project.blogspot.com/2011/12/fuelphpfacebook.html">FuelPHPでFacebookアプリを作ってみよう。準備編。</a></p>
]]></content:encoded>
					
					<wfw:commentRss>/archives/6598/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>[FuelPHP]空ディレクトリに.gitkeepを置く</title>
		<link>/archives/6577/</link>
					<comments>/archives/6577/#respond</comments>
		
		<dc:creator><![CDATA[fukata]]></dc:creator>
		<pubDate>Mon, 28 Nov 2011 17:18:43 +0000</pubDate>
				<category><![CDATA[開発]]></category>
		<category><![CDATA[FuelPHP]]></category>
		<guid isPermaLink="false">http://fukata.org/?p=6577</guid>

					<description><![CDATA[【重要】CodeIgniterのライセンスが変更されようとしています &#124; 記事アーカイブ :: 日本CodeIgniterユーザ会 CodeIgniterのライセンス騒動が起きているので、一応乗り換え ... <a href="/archives/6577/"> 続きを読む</a>]]></description>
										<content:encoded><![CDATA[<p><a href="https://codeigniter.jp/blog/article/64">【重要】CodeIgniterのライセンスが変更されようとしています | 記事アーカイブ :: 日本CodeIgniterユーザ会</a></p>
<p>CodeIgniterのライセンス騒動が起きているので、一応乗り換え対象として、話題になっている、<a href="https://fuelphp.com/">FuelPHP</a>ですが、試しに使ってみようかと思い、tar.gzのものをDLしてからローカルのテスト用プロジェクトにファイル群をコピーしたところ、.gitkeepすらない空ディレクトリが沢山あり、コミット後にいくつかコミット出来ていないことに気づきました。</p>
<p>そこで、以下のシェルを実行して、空ディレクトリの場合に.gitkeepを置いてみました。</p>
<pre lang="bash">
cd [FuelPHPプロジェクト]
for d in $(find ./fuel/ ./public/ -type d -empty); do touch "$d/.gitkeep"; done
</pre>
<p>FuelPHP使って何かやるというようなネタではないですが、あれ？っと思った方が居たら何かの助けになるかも。</p>
]]></content:encoded>
					
					<wfw:commentRss>/archives/6577/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
