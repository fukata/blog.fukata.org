<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>CoffeScript &#8211; blog.fukata.org</title>
	<atom:link href="/archives/tag/coffescript/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>旅するプログラマ</description>
	<lastBuildDate>Fri, 11 Aug 2017 22:58:48 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.6</generator>
	<item>
		<title>Node.jsとJavaで相互変換可能なAES-256-CBCのサンプル</title>
		<link>/archives/6882/</link>
					<comments>/archives/6882/#respond</comments>
		
		<dc:creator><![CDATA[fukata]]></dc:creator>
		<pubDate>Wed, 15 Feb 2012 14:47:36 +0000</pubDate>
				<category><![CDATA[開発]]></category>
		<category><![CDATA[AES]]></category>
		<category><![CDATA[AES-256-CBC]]></category>
		<category><![CDATA[CoffeScript]]></category>
		<guid isPermaLink="false">http://fukata.org/?p=6882</guid>

					<description><![CDATA[node.jsとJava間で相互変換可能な暗号化・復号化の処理を実装する必要があり、探してみたところ、あまり見つからなかったので、書いてみました。 といっても、オリジナルのファイルは下記のgistで紹 ... <a href="/archives/6882/"> 続きを読む</a>]]></description>
										<content:encoded><![CDATA[<p>node.jsとJava間で相互変換可能な暗号化・復号化の処理を実装する必要があり、探してみたところ、あまり見つからなかったので、書いてみました。</p>
<p>といっても、オリジナルのファイルは下記のgistで紹介されているものを使いました。<br />
<a href="https://gist.github.com/799d6021890f34734470">encryption woes2 — Gist</a></p>
<p>私の条件としては、鍵はシステム固定で、AES暗号化後の値をBase64形式で出力すれば良かったのでこの条件を満たすモノとなっています。<br />
<a href="https://github.com/fukata/AES-256-CBC-Example">fukata/AES-256-CBC-Example &#8211; GitHub</a></p>
<p><a href="https://iharder.sourceforge.net/current/java/base64/">Base64: Public Domain Base64 Encoder/Decoder</a><br />
Androidの場合、APIレベル8以上からBase64エンコード用のクラスが提供されていますが、APIレベル7以下の場合、提供されていないのでJavaでのBase64エンコードにはサードパーティ製のものを使用しています。</p>
]]></content:encoded>
					
					<wfw:commentRss>/archives/6882/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
