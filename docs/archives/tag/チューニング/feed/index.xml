<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>チューニング &#8211; blog.fukata.org</title>
	<atom:link href="/archives/tag/%E3%83%81%E3%83%A5%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>旅するプログラマ</description>
	<lastBuildDate>Fri, 11 Aug 2017 23:15:42 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.6</generator>
	<item>
		<title>[WordPress]ServerMan@VPSでの高速化のためのチューニング</title>
		<link>/archives/4301/</link>
					<comments>/archives/4301/#comments</comments>
		
		<dc:creator><![CDATA[fukata]]></dc:creator>
		<pubDate>Mon, 17 May 2010 19:02:32 +0000</pubDate>
				<category><![CDATA[雑記]]></category>
		<category><![CDATA[LAMP]]></category>
		<category><![CDATA[ServersMan@VPS]]></category>
		<category><![CDATA[WordPress]]></category>
		<category><![CDATA[チューニング]]></category>
		<guid isPermaLink="false">http://fukata.org/?p=4301</guid>

					<description><![CDATA[ServerMan@VPSに移行したということもあり、自由にサーバの設定をいじれるようになったので、高速化のためのチューニングを色々試してみました。現在のところどれくらい速くなったかというと、先日のh ... <a href="/archives/4301/"> 続きを読む</a>]]></description>
										<content:encoded><![CDATA[<p>ServerMan@VPSに移行したということもあり、自由にサーバの設定をいじれるようになったので、高速化のためのチューニングを色々試してみました。現在のところどれくらい速くなったかというと、先日の<a href="https://fukata.org/2010/05/16/switch-from-heteml-to-serverman/">hetemlからServerMan@VPSに移行完了</a>で当サイトのトップページの表示速度が0.3s程度まで縮小されたと記述しました。気づけばhetemlの時より半分以下になっていますね。今回のチューニング後は0.23s程度まで短縮されました。なんとか、0.1s台までチューニングしたいところです。</p>
<p>また、今回チューニングを行ったのはWordPress自身ではなく、WordPressを実行するサーバ側です。行ったのは下記のチューニングです。</p>
<ul>
<li>PHPアクセラレータの導入</li>
<li>MySQLのクエリキャッシュの導入</li>
<li>Apacheの圧縮転送の導入</li>
</ul>
<h2>PHPアクセラレータの導入</h2>
<p>PHPはインタープリタ言語と言われる、実行時に動的にコンパイルする言語です。そのため、実行毎にコンパイルするのではなく、コンパイル結果をキャッシュする為の役目をPHPアクセラレータが担ってくれます。</p>
<p>代表的なPHPアクセラレータにはGIGAZINEの下記の記事が詳しいです。</p>
<p><a href="https://gigazine.net/index.php?/news/comments/20061103_php_accelerator/">PHPアクセラレータで一番高速なのはどれか？ &#8211; GIGAZINE</a></p>
<p>今回ServerMan@VPSに導入したのは、APCというPHPアクセラレータです。インストールに関しては下記を参考にしました。</p>
<p><a href="https://2bits.com/articles/installing-php-apc-gnulinux-centos-5.html">Installing PHP APC on GNU/Linux Centos 5 | 2bits.com, Inc. &#8211; Drupal Development, Customization and Consulting</a></p>
<h2>Apacheの圧縮転送の導入</h2>
<p>次に行ったのがApacheが配信するデータを圧縮するというもので、Apache1.3まではmod_gzipモジュールが、Apache2.0からはmod_deflateモジュールというのを使用して行います。<br />
今回使用しているApacheは2.x系なので、mod_deflateを使います。</p>
<p>導入に関してはCentOSでyumでhttpd-develをインストールすると初期状態でmod_deflateが有効になっているので今回は割愛します。設定方法に関しては下記が参考になります。</p>
<p><a href="https://www.sssg.org/blogs/naoya/archives/827">mod_deflate を試してみた</a></p>
<p>ちなみに、mod_cacheとmod_deflateを併用して描画時間が短縮されるか確かめてみたのですが、同程度だった為、単体でより短縮されるmod_deflateを利用しました。ただ、mod_deflateは毎回配信するデータを圧縮するのでCPUに負荷がかかります。回線の使用帯域とCPUリソースを天秤にかけてmod_cacheもしくは、mod_deflateどちらかを使用するか決めると良いかと思います。</p>
<h2>MySQLのクエリキャッシュの導入</h2>
<p><a href="https://dev.mysql.com/doc/refman/5.1/ja/query-cache.html">MySQL :: MySQL 5.1 リファレンスマニュアル :: 4.13 MySQL クエリ キャッシュ</a></p>
<p>最後に行ったのがMySQLで発行されるSQLクエリをキャッシュするというもの。設定方法に関しては下記が参考になります。</p>
<p>クエリ結果のキャッシュ｜MySQL｜プログラムメモ</p>
<p>大きな設定に関しては上記の通りです。サーバ監視アプリの<a href="https://munin-monitoring.org/">Munin</a>をサーバにインストールしたので、これから定期的に計測して細かいチューニングを行います。また、改善されるようなチューニングが見つかった時には書きたいと思います。</p>
<p>今回のチューニングはあくまでもServerMan@VPSの限られたリソース内でのチューニングなので、サーバスペックが変わればチューニング方法も変わる可能性がありますので、各自のサーバスペックと相談の上チューニングを行ってください。また、今回はサーバ側の設定のみでWordPressには依存しないものなので、基本的なLAMP環境のチューニングとしても利用可能です。</p>
<p>最後に下記は上記のチューニング項目の現在の設定値になります。</p>
<h3>PHPアクセラレータ(APC)</h3>
<blockquote><p>
APC Support	enabled<br />
Version	3.0.19<br />
MMAP Support	Enabled<br />
MMAP File Mask	no value<br />
Locking type	pthread mutex Locks<br />
Revision	$Revision: 3.154.2.5 $<br />
Build Date	May 13 2010 14:20:28</p>
<p>Directive	Local Value	Master Value<br />
apc.cache_by_default	On	On<br />
apc.coredump_unmap	Off	Off<br />
apc.enable_cli	Off	Off<br />
apc.enabled	On	On<br />
apc.file_update_protection	2	2<br />
apc.filters	no value	no value<br />
apc.gc_ttl	3600	3600<br />
apc.include_once_override	Off	Off<br />
apc.max_file_size	1M	1M<br />
apc.mmap_file_mask	no value	no value<br />
apc.num_files_hint	1000	1000<br />
apc.report_autofilter	Off	Off<br />
apc.shm_segments	1	1<br />
apc.shm_size	30	30<br />
apc.slam_defense	0	0<br />
apc.stat	On	On<br />
apc.stat_ctime	Off	Off<br />
apc.ttl	0	0<br />
apc.user_entries_hint	4096	4096<br />
apc.user_ttl	0	0<br />
apc.write_lock	On	On
</p></blockquote>
<h3>MySQLクエリキャッシュ</h3>
<blockquote><p>
| have_query_cache                | YES                                                        |<br />
| query_cache_limit               | 1048576                                                    |<br />
| query_cache_min_res_unit        | 4096                                                       |<br />
| query_cache_size                | 33554432                                                   |<br />
| query_cache_type                | ON                                                         |<br />
| query_cache_wlock_invalidate    | OFF                                                        |
</p></blockquote>
<h3>mod_deflate</h3>
<blockquote><p>
SetOutputFilter DEFLATE<br />
BrowserMatch ^Mozilla/4 gzip-only-text/html<br />
BrowserMatch ^Mozilla/4\.0[678] no-gzip<br />
BrowserMatch \bMSI[E] !no-gzip !gzip-only-text/html<br />
SetEnvIfNoCase Request_URI \<br />
\.(?:gif|jpe?g|png)$ no-gzip dont-vary<br />
Header append Vary User-Agent env=!dont-vary
</p></blockquote>
]]></content:encoded>
					
					<wfw:commentRss>/archives/4301/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
	</channel>
</rss>
